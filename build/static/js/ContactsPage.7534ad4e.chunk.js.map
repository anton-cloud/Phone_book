{"version":3,"sources":["redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","components/contactForm/ContactFormStyled.js","components/contactForm/ContactForm.js","components/contactForm/ContactFormContainer.js","components/contactList/ContactListStyled.js","components/contactList/ContactList.js","components/contactList/ContactListContainer.js","components/filter/FilterStyled.js","components/filter/Filter.js","components/filter/FilterContainer.js","components/section/SectionStyled.js","components/section/Section.js","components/pages/contactsPage/ContactsPage.js"],"names":["baseUrl","contact","dispatch","actions","addContactRequest","axios","post","result","addContactSuccess","data","addContactError","message","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getState","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","ContactFormStyled","styled","form","ContactForm","addContact","useState","setName","number","setNumber","onHandleSubmit","e","preventDefault","some","item","toLocaleLowerCase","alert","onHandleChange","target","value","onSubmit","method","Form","Group","className","controlId","Label","Control","type","pattern","title","required","onChange","placeholder","autoComplete","Button","variant","onClick","ContactFormContainer","useSelector","contactsSelectors","useDispatch","contactsOperations","ContactListStyled","ul","ContactList","visibleContacts","deleteContact","onHandleDelete","map","ContactListContainer","useEffect","FilterStyled","div","Filter","onChangeFilter","Text","FilterContainer","contactsActions","changeFilter","SectionStyled","section","Section","children","ContactsPage"],"mappings":"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","file":"static/js/ContactsPage.7534ad4e.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { token } from \"../auth/authOperation\";\r\nimport actions from \"./contactsActions\";\r\nconst baseUrl = `https://connections-api.herokuapp.com`;\r\n\r\n\r\n\r\nconst fetchContacts = () => async (dispatch, getState) => {\r\n  // const tokenContact = getState().auth.token\r\n  dispatch(actions.fetchContactsRequest);\r\n  try {\r\n    \r\n// token.set(tokenContact)\r\n    const result = await axios.get(`${baseUrl}/contacts`);\r\n\r\n    dispatch(actions.fetchContactsSuccess(result.data));\r\n  } catch (error) {\r\n    dispatch(actions.fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\nconst addContact = (contact) => async (dispatch) => {\r\n  dispatch(actions.addContactRequest());\r\n  try {\r\n    const result = await axios.post(`${baseUrl}/contacts`, contact);\r\n    dispatch(actions.addContactSuccess(result.data));\r\n  } catch (error) {\r\n    dispatch(actions.addContactError(error.message));\r\n  }\r\n};\r\n\r\nconst deleteContact = (id) => async (dispatch) => {\r\n  dispatch(actions.deleteContactRequest());\r\n  try {\r\n    await axios.delete(`${baseUrl}/contacts/${id}`);\r\n    dispatch(actions.deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(actions.deleteContactError(error.message));\r\n  }\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\nexport default { getContacts, getFilter, getVisibleContacts };\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactFormStyled = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  input,\r\n  button {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n","import { useState } from \"react\";\r\nimport { ContactFormStyled } from \"./ContactFormStyled\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactForm = ({ addContact, contacts }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const onSubmit = (contact) => {\r\n    contacts.some(\r\n      (item) =>\r\n        item.name.toLocaleLowerCase() === contact.name.toLocaleLowerCase()\r\n    )\r\n      ? alert(`${contact.name} is already in contacts.`)\r\n      : addContact(contact);\r\n  };\r\n\r\n  const onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit({ name, number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  const onHandleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContactFormStyled onSubmit={onHandleSubmit} method=\"post\">\r\n      {/* <label>\r\n        Name\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={onHandleChange}\r\n          value={name}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <br />\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={onHandleChange}\r\n          value={number}\r\n        />\r\n      </label> */}\r\n\r\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n        <Form.Label>Contact's name:</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={onHandleChange}\r\n          value={name}\r\n          placeholder=\"Enter contact's name ...\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group className=\"mb-3\">\r\n        <Form.Label>Phone number:</Form.Label>\r\n        <Form.Control\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={onHandleChange}\r\n          value={number}\r\n          placeholder=\"Enter phone number ...\"\r\n          autoComplete=\"on\"\r\n        />\r\n      </Form.Group>\r\n      {name && (\r\n        <Button variant=\"warning\" type=\"button\" onClick={onHandleSubmit}>\r\n          Add contact\r\n        </Button>\r\n      )}\r\n    </ContactFormStyled>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.array,\r\n  addContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import {useEffect} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport contactsOperations from \"../../redux/contacts/contactsOperations\";\r\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\r\nimport ContactForm from \"./ContactForm\";\r\n\r\nconst ContactFormContainer = () => {\r\n  const contacts = useSelector((state) => contactsSelectors.getContacts(state));\r\n  const dispatch = useDispatch();\r\n\r\n  const addContact = (contact) => {\r\n    dispatch(contactsOperations.addContact(contact));\r\n  };\r\n\r\n\r\n  return <ContactForm addContact={addContact} contacts={contacts}/>;\r\n};\r\n\r\nexport default ContactFormContainer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactListStyled = styled.ul`\r\n  list-style: none;\r\n\r\n  .wrapper {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .text {\r\n    margin: 10px;\r\n  }\r\n\r\n  button {\r\n    height: 25px;\r\n    margin-right: 20px;\r\n    padding: 0;\r\n    width: 60px;\r\n    height: 30px;\r\n    \r\n    &:hover .text {\r\n      color: red;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ContactListStyled } from \"./ContactListStyled\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst ContactList = ({ visibleContacts, deleteContact }) => {\r\n  const onHandleDelete = (e) => deleteContact(e.target.id);\r\n\r\n  return (\r\n    <ContactListStyled>\r\n      {visibleContacts.map(({ name, number, id }) => (\r\n        <li key={id}>\r\n          <div className=\"wrapper\">\r\n            <p className=\"text\">\r\n              {name} {number}\r\n            </p>\r\n            {/* <button type=\"button\" id={id} onClick={onHandleDelete}>\r\n              delete\r\n            </button> */}\r\n\r\n            <Button\r\n              variant=\"danger\"\r\n              type=\"button\"\r\n              id={id}\r\n              onClick={onHandleDelete}\r\n            >\r\n              delete\r\n            </Button>\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </ContactListStyled>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  visibleContacts: PropTypes.array,\r\n  deleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport ContactList from './ContactList';\r\n\r\nconst ContactListContainer = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const visibleContacts = useSelector((state) =>\r\n  contactsSelectors.getVisibleContacts(state)\r\n);\r\nconst deleteContact = (value) =>\r\n  dispatch(contactsOperations.deleteContact(value));\r\n\r\n  return (\r\n    <ContactList visibleContacts={visibleContacts} deleteContact={deleteContact}/>\r\n  );\r\n}\r\n\r\nexport default ContactListContainer;","import styled from \"styled-components\";\r\n\r\nexport const FilterStyled = styled.div`\r\n  text-align: center;\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FilterStyled } from \"./FilterStyled\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\n\r\nconst Filter = ({ onChangeFilter, filter }) => {\r\n  const onHandleChangeFilter = (e) => {\r\n    const { value } = e.target;\r\n    onChangeFilter(value);\r\n  };\r\n\r\n  return (\r\n    <FilterStyled>\r\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n        <Form.Label>Find contacts by name: </Form.Label>\r\n        <Form.Control\r\n          value={filter}\r\n          onChange={onHandleChangeFilter}\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          placeholder=\"for example: Rose ...\"\r\n        />\r\n        <Form.Text className=\"text-muted\">\r\n          Here you can enter data for search.\r\n        </Form.Text>\r\n      </Form.Group>\r\n    </FilterStyled>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  onChangeFilter: PropTypes.func,\r\n  filter: PropTypes.string,\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst FilterContainer = () => {\r\n  const filter = useSelector((state) => contactsSelectors.getFilter(state));\r\n  const dispatch = useDispatch();\r\n  const onChangeFilter = (value) => {\r\n    dispatch(contactsActions.changeFilter(value));\r\n  };\r\n  return <Filter filter={filter} onChangeFilter={onChangeFilter}/>;\r\n};\r\n\r\nexport default FilterContainer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SectionStyled = styled.section`\r\n  margin-top: 10px;\r\n  margin-left: 10px;\r\n  border: 2px solid lightgrey;\r\n  border-radius: 10px;\r\n\r\n\r\n  .title {\r\n    text-align: center;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { SectionStyled } from \"./SectionStyled\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <SectionStyled>\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </SectionStyled>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport ContactFormContainer from \"../../contactForm/ContactFormContainer\";\r\nimport ContactListContainer from \"../../contactList/ContactListContainer\";\r\nimport FilterContainer from \"../../filter/FilterContainer\";\r\nimport Section from \"../../section/Section\";\r\n\r\nconst ContactsPage = () => {\r\n  return (\r\n    <>\r\n      <Section title=\"Phonebook\">\r\n        <ContactFormContainer />\r\n      </Section>\r\n\r\n      <Section title=\"Contacts\">\r\n        <FilterContainer />\r\n        <ContactListContainer/>\r\n      </Section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}